name: 🚀 CI/CD Pipeline - Build, Test & Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Permite ejecución manual

env:
  NODE_VERSION: '18'

jobs:
  # ===== JOB 1: ANÁLISIS Y LINTING =====
  lint-and-analyze:
    name: 🔍 Lint & Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para análisis completo

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧹 Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: 🔍 TypeScript type checking
        run: npx tsc --noEmit

      - name: 📊 Run Code Analysis
        run: |
          echo "🔍 Analyzing code quality..."
          npx eslint src/ --format json --output-file eslint-report.json || true
          
      - name: 📤 Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: eslint-report.json
          retention-days: 30

  # ===== JOB 2: TESTING =====
  test:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: lint-and-analyze
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            npm run test:unit -- --coverage
          else
            npm run test:integration -- --coverage
          fi
        env:
          CI: true

      - name: 📊 Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results.xml
          retention-days: 30

  # ===== JOB 3: BUILD =====
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-analyze, test]
    
    outputs:
      build-success: ${{ steps.build.outcome }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        id: build
        run: |
          echo "🏗️ Building application..."
          npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: 📊 Analyze bundle size
        run: |
          echo "📊 Analyzing bundle size..."
          npm run build:analyze || echo "Bundle analysis not available"
          
      - name: 🔍 Check PWA requirements
        run: |
          echo "🔍 Validating PWA requirements..."
          # Verificar que existan archivos PWA críticos
          test -f dist/manifest.json && echo "✅ manifest.json found" || echo "❌ manifest.json missing"
          test -f dist/sw.js && echo "✅ service worker found" || echo "❌ service worker missing"
          
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

  # ===== JOB 4: SECURITY SCAN =====
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-analyze
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level moderate
          
      - name: 🔍 Check for vulnerable dependencies
        run: |
          echo "🔍 Checking for vulnerable dependencies..."
          npx audit-ci --moderate
        continue-on-error: true

  # ===== JOB 5: LIGHTHOUSE CI =====
  lighthouse:
    name: 📊 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 📊 Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}

  # ===== JOB 6: DEPLOY TO STAGING =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://gastos-hormigas-staging.web.app
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to Firebase Staging
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_GESTOS_GASTOSV2 }}'
          projectId: gastos-hormigas-staging
          channelId: live

  # ===== JOB 7: DEPLOY TO PRODUCTION =====
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, lighthouse]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://gestos-gastosv2.web.app
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_GESTOS_GASTOSV2 }}'
          projectId: gastos-hormigas
          channelId: live

      - name: 🎉 Deployment success notification
        run: |
          echo "🎉 ¡Deployment exitoso a producción!"
          echo "🌐 URL: https://gestos-gastosv2.web.app"
          echo "📊 Build: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"

  # ===== JOB 8: NOTIFICACIONES =====
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: 📢 Success notification
        if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
        run: |
          echo "✅ Pipeline ejecutado exitosamente"
          echo "🚀 Deployment completado"
          
      - name: ❌ Failure notification  
        if: failure()
        run: |
          echo "❌ Pipeline falló"
          echo "🔍 Revisar logs para más detalles"
